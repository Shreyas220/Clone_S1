{"ast":null,"code":"var _jsxFileName = \"/home/gladium/Desktop/spotify /spotify-clone/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Login from \"./Login\";\nimport { getTokenFromResponse } from \"./spotify\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Player from \"./Player\";\nimport { useDataLayerValue } from './DataLayer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  _s();\n\n  const [token, setToken] = useState(null);\n  const [{\n    user\n  }, dispatch] = useDataLayerValue(); //run code based on a given condition \n\n  useEffect(() => {\n    const hash = getTokenFromResponse();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if (_token) {\n      setToken(_token); //giving token to spotify to safety talk to it \n\n      spotify.setAccessToken(_token);\n      spotify.getMe().then(user => {\n        dispatch({\n          type: 'SET_USER',\n          user: user\n        });\n      });\n    }\n\n    spotify.getUserPlaylists().then(playlists => {\n      dispatch({\n        type: \"SET_PLAYLIST\",\n        playlists: playlists\n      });\n    });\n    console.log(\"I HAVE A TOKEN ðŸ‘‰\", _token);\n  }, [token, dispatch]); //seeing if a user is present \n\n  console.log(\"user is ðŸ˜€\", user);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: token ? /*#__PURE__*/_jsxDEV(Player, {\n      spotify: spotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8NIVFpCtbX5kC+i/OZFB9n9hvUc=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gladium/Desktop/spotify /spotify-clone/src/App.js"],"names":["React","useEffect","useState","Login","getTokenFromResponse","SpotifyWebApi","Player","useDataLayerValue","spotify","App","token","setToken","user","dispatch","hash","window","location","_token","access_token","setAccessToken","getMe","then","type","getUserPlaylists","playlists","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,oBAAT,QAAsC,WAAtC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,iBAAR,QAAgC,aAAhC;;AAEA,MAAMC,OAAO,GAAG,IAAIH,aAAJ,EAAhB;;AAIA,SAASI,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,KAAD,EAASC,QAAT,IAAqBT,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAAC;AAACU,IAAAA;AAAD,GAAD,EAASC,QAAT,IAAqBN,iBAAiB,EAA5C,CAHa,CAMb;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,IAAI,GAAGV,oBAAoB,EAAjC;AACAW,IAAAA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAuB,EAAvB;AAEA,UAAMG,MAAM,GAAGH,IAAI,CAACI,YAApB;;AACA,QAAID,MAAJ,EAAW;AAETN,MAAAA,QAAQ,CAAEM,MAAF,CAAR,CAFS,CAIR;;AACAT,MAAAA,OAAO,CAACW,cAAR,CAAuBF,MAAvB;AACAT,MAAAA,OAAO,CAACY,KAAR,GAAgBC,IAAhB,CAAsBT,IAAD,IAAS;AAE5BC,QAAAA,QAAQ,CAAC;AACPS,UAAAA,IAAI,EAAE,UADC;AAEPV,UAAAA,IAAI,EAAEA;AAFC,SAAD,CAAR;AAKD,OAPD;AAQF;;AAGDJ,IAAAA,OAAO,CAACe,gBAAR,GAA2BF,IAA3B,CAAiCG,SAAD,IAAa;AAC3CX,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAE,cADC;AAEPE,QAAAA,SAAS,EAACA;AAFH,OAAD,CAAR;AAKD,KAND;AAWAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCT,MAAhC;AACD,GAlCQ,EAkCN,CAACP,KAAD,EAAQG,QAAR,CAlCM,CAAT,CAPa,CA2Cb;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bd,IAA1B;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cAEIF,KAAK,gBACH,QAAE,MAAF;AAAS,MAAA,OAAO,EAAIF;AAApB;AAAA;AAAA;AAAA;AAAA,YADG,gBAGH,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AALN;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA5DQC,G;UAGoBF,iB;;;KAHpBE,G;AA8DT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Login from \"./Login\"\nimport { getTokenFromResponse  } from \"./spotify\";\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport Player from \"./Player\";\nimport {useDataLayerValue} from './DataLayer'\n\nconst spotify = new SpotifyWebApi();\n\n\n\nfunction App() {\n\n  const [token , setToken] = useState(null);\n  const [{user}, dispatch] = useDataLayerValue();\n\n\n  //run code based on a given condition \n  useEffect(() => {\n    const hash = getTokenFromResponse();\n    window.location.hash = \"\";\n\n    const _token = hash.access_token;\n    if( _token){\n     \n      setToken( _token );\n\n       //giving token to spotify to safety talk to it \n       spotify.setAccessToken(_token);\n       spotify.getMe().then((user)=> {\n      \n         dispatch({\n           type: 'SET_USER',\n           user: user,\n\n         })\n       });\n    }\n    \n    \n    spotify.getUserPlaylists().then((playlists)=>{\n      dispatch({\n        type: \"SET_PLAYLIST\",\n        playlists:playlists,\n      });\n\n    });\n\n\n\n\n    console.log(\"I HAVE A TOKEN ðŸ‘‰\",_token);\n  }, [token, dispatch]);\n\n  //seeing if a user is present \n  console.log(\"user is ðŸ˜€\", user);\n\n\n\n  return (\n    <div className=\"App\">\n      {\n        token ? (\n          < Player spotify = {spotify} />\n        ) : (\n          <Login />\n        )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}